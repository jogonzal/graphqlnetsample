// <auto-generated />
using System;
using DataRepositories.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GraphQLSampleModels.Migrations
{
    [DbContext(typeof(EtisysContext))]
    [Migration("20181125233357_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataRepositories.Entities.Agente", b =>
                {
                    b.Property<string>("AgenteClave")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AgenteCD_EDO_PAIS");

                    b.Property<string>("AgenteCP");

                    b.Property<decimal>("AgenteComision");

                    b.Property<string>("AgenteDireccion");

                    b.Property<bool>("AgenteEstado");

                    b.Property<string>("AgenteFax");

                    b.Property<string>("AgenteNombre");

                    b.Property<string>("AgenteTelefono");

                    b.HasKey("AgenteClave");

                    b.ToTable("Agentes");
                });

            modelBuilder.Entity("DataRepositories.Entities.Cheque", b =>
                {
                    b.Property<string>("ChequeClave")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ChequeANombreDe");

                    b.Property<decimal>("ChequeCantIva");

                    b.Property<string>("ChequeCuentaDeGasto");

                    b.Property<string>("ChequeDescripcion");

                    b.Property<string>("ChequeFacturaPagada");

                    b.Property<DateTime>("ChequeFecha");

                    b.Property<string>("ChequeNumeroDeCheque");

                    b.Property<int>("ChequePesos");

                    b.Property<string>("ChequeProveedorClave")
                        .IsRequired();

                    b.Property<decimal>("ChequeTotalAPagar");

                    b.HasKey("ChequeClave");

                    b.HasIndex("ChequeProveedorClave");

                    b.ToTable("Cheques");
                });

            modelBuilder.Entity("DataRepositories.Entities.Cliente", b =>
                {
                    b.Property<string>("ClienteClave")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("ClienteActivo");

                    b.Property<int>("ClienteAddenda");

                    b.Property<string>("ClienteAgenteClave")
                        .IsRequired();

                    b.Property<string>("ClienteCFDIFormaDePago");

                    b.Property<string>("ClienteCFDIMetodoDePago");

                    b.Property<string>("ClienteCFDINumRegIdTrip");

                    b.Property<string>("ClienteCFDIPais");

                    b.Property<string>("ClienteCP");

                    b.Property<string>("ClienteCalle");

                    b.Property<bool>("ClienteCantidadEnMillares");

                    b.Property<string>("ClienteColonia");

                    b.Property<string>("ClienteComprador");

                    b.Property<string>("ClienteCondicionesDePago");

                    b.Property<decimal>("ClienteCreditoMaximo");

                    b.Property<string>("ClienteDescuento");

                    b.Property<string>("ClienteEstado");

                    b.Property<bool>("ClienteExtranjero");

                    b.Property<string>("ClienteFax");

                    b.Property<bool>("ClienteFlete");

                    b.Property<string>("ClienteInformacionImprimir");

                    b.Property<string>("ClienteLeyenda");

                    b.Property<string>("ClienteLocalidad");

                    b.Property<string>("ClienteMail");

                    b.Property<string>("ClienteMailCompras");

                    b.Property<string>("ClienteMailFacturas");

                    b.Property<string>("ClienteMailPagos");

                    b.Property<string>("ClienteMedotoDePago");

                    b.Property<string>("ClienteMunicipio");

                    b.Property<string>("ClienteNombreCompras");

                    b.Property<string>("ClienteNombreFacturas");

                    b.Property<string>("ClienteNombrePagos");

                    b.Property<string>("ClienteNumCtaPagoNuevo");

                    b.Property<string>("ClienteNumeroExterior");

                    b.Property<string>("ClienteNumeroInterior");

                    b.Property<string>("ClienteNumeroProveedor");

                    b.Property<string>("ClientePagos");

                    b.Property<string>("ClientePais");

                    b.Property<int>("ClientePesos");

                    b.Property<int>("ClientePlazo");

                    b.Property<string>("ClienteRFC");

                    b.Property<string>("ClienteRazonSocial");

                    b.Property<string>("ClienteRequisitosEmbarque");

                    b.Property<string>("ClienteRequisitosFacturacion");

                    b.Property<string>("ClienteRevision");

                    b.Property<string>("ClienteTelefono");

                    b.Property<string>("ClienteTransporte");

                    b.Property<string>("ClienteUsoCFDI");

                    b.Property<string>("ClienteZonaClave")
                        .IsRequired();

                    b.HasKey("ClienteClave");

                    b.HasIndex("ClienteAgenteClave");

                    b.HasIndex("ClienteZonaClave");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("DataRepositories.Entities.Compra", b =>
                {
                    b.Property<string>("CompraClave")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CompraAprobado");

                    b.Property<decimal>("CompraCantMill");

                    b.Property<string>("CompraComentarios");

                    b.Property<string>("CompraConsignatarioClave");

                    b.Property<decimal>("CompraDescuento");

                    b.Property<decimal>("CompraDescuentoPorcentaje");

                    b.Property<int>("CompraEstado");

                    b.Property<DateTime>("CompraFecha");

                    b.Property<decimal>("CompraFlete");

                    b.Property<decimal>("CompraIVA");

                    b.Property<int>("CompraMoneda");

                    b.Property<string>("CompraProveedorClave")
                        .IsRequired();

                    b.Property<decimal>("CompraSubtotal");

                    b.Property<decimal>("CompraTipoCambio");

                    b.Property<decimal>("CompraTotal");

                    b.Property<string>("CompraTransporte");

                    b.Property<string>("CompraUsuarioClave");

                    b.HasKey("CompraClave");

                    b.HasIndex("CompraConsignatarioClave");

                    b.HasIndex("CompraProveedorClave");

                    b.HasIndex("CompraUsuarioClave");

                    b.ToTable("Compras");
                });

            modelBuilder.Entity("DataRepositories.Entities.ConceptoCompra", b =>
                {
                    b.Property<string>("ConceptoCompraClave")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("ConceptoCompraCantidad");

                    b.Property<string>("ConceptoCompraCompraClave")
                        .IsRequired();

                    b.Property<decimal>("ConceptoCompraDiferencia");

                    b.Property<string>("ConceptoCompraEtiquetaClave");

                    b.Property<int>("ConceptoCompraMoneda");

                    b.Property<decimal>("ConceptoCompraPrecio");

                    b.Property<decimal>("ConceptoCompraRecibido");

                    b.Property<decimal>("ConceptoCompraSubtotal");

                    b.Property<bool>("ConceptoCompraSurtido");

                    b.HasKey("ConceptoCompraClave");

                    b.HasIndex("ConceptoCompraCompraClave");

                    b.HasIndex("ConceptoCompraEtiquetaClave");

                    b.ToTable("ConceptoCompra");
                });

            modelBuilder.Entity("DataRepositories.Entities.ConceptoFactura", b =>
                {
                    b.Property<string>("ConceptoFacturaClave")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("ConceptoFacturaCantidad");

                    b.Property<string>("ConceptoFacturaEtiquetaClave");

                    b.Property<string>("ConceptoFacturaFacturaClave")
                        .IsRequired();

                    b.Property<int>("ConceptoFacturaMoneda");

                    b.Property<decimal>("ConceptoFacturaPrecio");

                    b.Property<bool>("ConceptoFacturaRevisada");

                    b.Property<bool>("ConceptoFacturaSeleccionar");

                    b.Property<decimal>("ConceptoFacturaSubtotal");

                    b.HasKey("ConceptoFacturaClave");

                    b.HasIndex("ConceptoFacturaEtiquetaClave");

                    b.HasIndex("ConceptoFacturaFacturaClave");

                    b.ToTable("ConceptoFactura");
                });

            modelBuilder.Entity("DataRepositories.Entities.ConceptoPedido", b =>
                {
                    b.Property<string>("ConceptoPedidoClave")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("ConceptoPedidoCantSurtida");

                    b.Property<decimal>("ConceptoPedidoCantidad");

                    b.Property<decimal>("ConceptoPedidoComision");

                    b.Property<decimal>("ConceptoPedidoDiferencia");

                    b.Property<string>("ConceptoPedidoEtiquetaClave");

                    b.Property<int>("ConceptoPedidoMoneda");

                    b.Property<string>("ConceptoPedidoPedidoClave")
                        .IsRequired();

                    b.Property<decimal>("ConceptoPedidoPrecio");

                    b.Property<bool>("ConceptoPedidoSeleccionar");

                    b.Property<decimal>("ConceptoPedidoSubtotal");

                    b.Property<bool>("ConceptoPedidoSurtido");

                    b.HasKey("ConceptoPedidoClave");

                    b.HasIndex("ConceptoPedidoEtiquetaClave");

                    b.HasIndex("ConceptoPedidoPedidoClave");

                    b.ToTable("ConceptoPedido");
                });

            modelBuilder.Entity("DataRepositories.Entities.Consignatario", b =>
                {
                    b.Property<string>("ConsignatarioClave")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConsignatarioCP");

                    b.Property<string>("ConsignatarioCiudad");

                    b.Property<string>("ConsignatarioClienteClave")
                        .IsRequired();

                    b.Property<string>("ConsignatarioDireccion");

                    b.Property<string>("ConsignatarioEstado");

                    b.Property<string>("ConsignatarioFax");

                    b.Property<string>("ConsignatarioNombre");

                    b.Property<string>("ConsignatarioTelefono");

                    b.HasKey("ConsignatarioClave");

                    b.HasIndex("ConsignatarioClienteClave");

                    b.ToTable("Consignatarios");
                });

            modelBuilder.Entity("DataRepositories.Entities.Cortador", b =>
                {
                    b.Property<string>("CortadorClave")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CortadorDescripcion");

                    b.Property<short>("CortadorEngrane");

                    b.Property<bool>("CortadorEstado");

                    b.Property<decimal>("CortadorMedidaPulg");

                    b.Property<byte>("CortadorRodillo");

                    b.Property<byte>("CortadorTipo");

                    b.HasKey("CortadorClave");

                    b.ToTable("Cortadores");
                });

            modelBuilder.Entity("DataRepositories.Entities.CortadorEtiqueta", b =>
                {
                    b.Property<string>("CortadorClave");

                    b.Property<string>("EtiquetaClave");

                    b.HasKey("CortadorClave", "EtiquetaClave");

                    b.HasIndex("EtiquetaClave");

                    b.ToTable("CortadorEtiqueta");
                });

            modelBuilder.Entity("DataRepositories.Entities.CuentaGasto", b =>
                {
                    b.Property<string>("CuentaGastoClave")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CuentaGastoDescripcion");

                    b.HasKey("CuentaGastoClave");

                    b.ToTable("CuentasGasto");
                });

            modelBuilder.Entity("DataRepositories.Entities.Estacion", b =>
                {
                    b.Property<string>("EstacionClave")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("EstacionAnilox");

                    b.Property<string>("EstacionBlade");

                    b.Property<string>("EstacionComentarios");

                    b.Property<string>("EstacionEtiquetaClave")
                        .IsRequired();

                    b.Property<string>("EstacionMarca");

                    b.Property<string>("EstacionPantoneClave");

                    b.Property<int>("EstacionPosicion");

                    b.Property<string>("EstacionRodillo");

                    b.HasKey("EstacionClave");

                    b.HasIndex("EstacionEtiquetaClave");

                    b.HasIndex("EstacionPantoneClave");

                    b.ToTable("Estaciones");
                });

            modelBuilder.Entity("DataRepositories.Entities.Etiqueta", b =>
                {
                    b.Property<string>("EtiquetaClave")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("EtiquetaAncho");

                    b.Property<decimal>("EtiquetaAnchoCent");

                    b.Property<bool>("EtiquetaAprobado");

                    b.Property<bool>("EtiquetaBarnizado");

                    b.Property<string>("EtiquetaBarnizadoDesc");

                    b.Property<bool>("EtiquetaBolsa");

                    b.Property<decimal>("EtiquetaBultos");

                    b.Property<string>("EtiquetaCFDIClaveProdServ");

                    b.Property<string>("EtiquetaCFDIClaveUnidad");

                    b.Property<bool>("EtiquetaCaja");

                    b.Property<bool>("EtiquetaCertificadoCalidad");

                    b.Property<string>("EtiquetaClavePro");

                    b.Property<string>("EtiquetaClienteClave");

                    b.Property<bool>("EtiquetaClienteCritico");

                    b.Property<decimal>("EtiquetaComision");

                    b.Property<bool>("EtiquetaContarComoRollo");

                    b.Property<decimal>("EtiquetaCosto");

                    b.Property<decimal>("EtiquetaDiametro");

                    b.Property<bool>("EtiquetaDobleRevisado");

                    b.Property<bool>("EtiquetaEstado");

                    b.Property<bool>("EtiquetaEtiquetadoAutomatico");

                    b.Property<int>("EtiquetaEtiquetasPorDoblez");

                    b.Property<decimal>("EtiquetaEtiquetasPorRollo");

                    b.Property<DateTime>("EtiquetaFechaAlta");

                    b.Property<DateTime>("EtiquetaFechaCambio");

                    b.Property<string>("EtiquetaFormatoClave");

                    b.Property<string>("EtiquetaFraccionArancelaria");

                    b.Property<bool>("EtiquetaLaminado");

                    b.Property<string>("EtiquetaLaminadoDesc");

                    b.Property<decimal>("EtiquetaLargo");

                    b.Property<int>("EtiquetaMaquina");

                    b.Property<string>("EtiquetaMaterialClave");

                    b.Property<string>("EtiquetaMedBolsa");

                    b.Property<string>("EtiquetaMedCaja");

                    b.Property<decimal>("EtiquetaMinimo");

                    b.Property<decimal>("EtiquetaMinimoInventario");

                    b.Property<int>("EtiquetaMonedaCosto");

                    b.Property<string>("EtiquetaNombre");

                    b.Property<string>("EtiquetaObervaEmpaque");

                    b.Property<string>("EtiquetaObservaD");

                    b.Property<string>("EtiquetaObservaProduccion");

                    b.Property<string>("EtiquetaObservacionesDeCalidad");

                    b.Property<string>("EtiquetaObservacionesGeneral");

                    b.Property<int>("EtiquetaPasoRollo");

                    b.Property<decimal>("EtiquetaPeso");

                    b.Property<int>("EtiquetaPesos");

                    b.Property<decimal>("EtiquetaPrecio");

                    b.Property<decimal>("EtiquetaPrecioAnterior");

                    b.Property<string>("EtiquetaProveedorClave");

                    b.Property<decimal>("EtiquetaPuntosXRollo");

                    b.Property<int>("EtiquetaRxBolsa");

                    b.Property<int>("EtiquetaRxCaja");

                    b.Property<string>("EtiquetaSKU");

                    b.Property<int>("EtiquetaSalida");

                    b.Property<decimal>("EtiquetaSeparacion");

                    b.Property<int>("EtiquetaTipoAcabado");

                    b.Property<string>("EtiquetaUnidad");

                    b.HasKey("EtiquetaClave");

                    b.HasIndex("EtiquetaClienteClave");

                    b.HasIndex("EtiquetaFormatoClave");

                    b.HasIndex("EtiquetaMaterialClave");

                    b.HasIndex("EtiquetaProveedorClave");

                    b.ToTable("Etiquetas");
                });

            modelBuilder.Entity("DataRepositories.Entities.ExistenciaInventario", b =>
                {
                    b.Property<string>("ExistenciaInventarioClave")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("ExisgtenciaInventarioEnBodega");

                    b.Property<short>("ExistenciaInventarioArea");

                    b.Property<decimal>("ExistenciaInventarioCantidadActual");

                    b.Property<decimal>("ExistenciaInventarioCantidadInicial");

                    b.Property<string>("ExistenciaInventarioEtiquetaClave");

                    b.Property<string>("ExistenciaInventarioFactura");

                    b.Property<DateTime>("ExistenciaInventarioFechaEntrada");

                    b.Property<DateTime>("ExistenciaInventarioFechaSalida");

                    b.Property<string>("ExistenciaInventarioLote");

                    b.Property<string>("ExistenciaInventarioObservaciones");

                    b.Property<string>("ExistenciaInventarioPedido");

                    b.Property<string>("ExistenciaInventarioUsuarioClave");

                    b.HasKey("ExistenciaInventarioClave");

                    b.HasIndex("ExistenciaInventarioEtiquetaClave");

                    b.HasIndex("ExistenciaInventarioUsuarioClave");

                    b.ToTable("Existencias");
                });

            modelBuilder.Entity("DataRepositories.Entities.Factura", b =>
                {
                    b.Property<string>("FacturaClave")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("FacturaAbonos");

                    b.Property<string>("FacturaAgenteClave");

                    b.Property<bool>("FacturaCFDI");

                    b.Property<string>("FacturaCFDIFormaDePago");

                    b.Property<string>("FacturaCFDIMetodoDePago");

                    b.Property<string>("FacturaCFDIVersion");

                    b.Property<bool>("FacturaCalcularComision");

                    b.Property<decimal>("FacturaCantIva");

                    b.Property<decimal>("FacturaCantidadTotal");

                    b.Property<string>("FacturaClienteClave")
                        .IsRequired();

                    b.Property<string>("FacturaClientesNumCtaDePagoNuevo");

                    b.Property<decimal>("FacturaComision");

                    b.Property<string>("FacturaConsignatarioClave");

                    b.Property<decimal>("FacturaDescuento");

                    b.Property<bool>("FacturaEnviada");

                    b.Property<int>("FacturaEstado");

                    b.Property<DateTime>("FacturaFecha");

                    b.Property<DateTime>("FacturaFechaHora");

                    b.Property<DateTime>("FacturaFechaTimbrado");

                    b.Property<DateTime>("FacturaFechaVencimiento");

                    b.Property<decimal>("FacturaFlete");

                    b.Property<string>("FacturaFolioFiscal");

                    b.Property<bool>("FacturaGenerada");

                    b.Property<string>("FacturaGuia");

                    b.Property<decimal>("FacturaIVA");

                    b.Property<string>("FacturaInformacionImprimir");

                    b.Property<string>("FacturaLeyenda");

                    b.Property<string>("FacturaMetodoDePago");

                    b.Property<int>("FacturaMoneda");

                    b.Property<string>("FacturaPedCliente");

                    b.Property<string>("FacturaPedidoClave");

                    b.Property<decimal>("FacturaPlazo");

                    b.Property<decimal>("FacturaSaldo");

                    b.Property<string>("FacturaSelloCFDI");

                    b.Property<string>("FacturaSelloSAT");

                    b.Property<string>("FacturaSerie");

                    b.Property<decimal>("FacturaSubtotal");

                    b.Property<decimal>("FacturaSubtotalDescuento");

                    b.Property<decimal>("FacturaTipoCambio");

                    b.Property<decimal>("FacturaTotal");

                    b.Property<decimal>("FacturaTotnCre");

                    b.Property<string>("FacturaTransporte");

                    b.Property<string>("FacturaUsoCFDI");

                    b.Property<string>("FacturaUsuarioClave");

                    b.HasKey("FacturaClave");

                    b.HasIndex("FacturaAgenteClave");

                    b.HasIndex("FacturaClienteClave");

                    b.HasIndex("FacturaConsignatarioClave");

                    b.HasIndex("FacturaPedidoClave");

                    b.HasIndex("FacturaUsuarioClave");

                    b.ToTable("Facturas");
                });

            modelBuilder.Entity("DataRepositories.Entities.Formato", b =>
                {
                    b.Property<string>("FormatoClave")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FormatoDescripcion");

                    b.HasKey("FormatoClave");

                    b.ToTable("Formatos");
                });

            modelBuilder.Entity("DataRepositories.Entities.InventarioSalida", b =>
                {
                    b.Property<string>("InventarioSalidaClave")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("InventarioSalidaCantidad");

                    b.Property<string>("InventarioSalidaComentarios");

                    b.Property<string>("InventarioSalidaExistenciaInventarioClave")
                        .IsRequired();

                    b.Property<DateTime>("InventarioSalidaFecha");

                    b.Property<string>("InventarioSalidaSalida");

                    b.HasKey("InventarioSalidaClave");

                    b.HasIndex("InventarioSalidaExistenciaInventarioClave");

                    b.ToTable("Salidas");
                });

            modelBuilder.Entity("DataRepositories.Entities.Material", b =>
                {
                    b.Property<string>("MaterialClave")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("MaterialFormatoClave");

                    b.Property<string>("MaterialNombre");

                    b.Property<string>("MaterialProveedorClave");

                    b.HasKey("MaterialClave");

                    b.HasIndex("MaterialFormatoClave");

                    b.HasIndex("MaterialProveedorClave");

                    b.ToTable("Materiales");
                });

            modelBuilder.Entity("DataRepositories.Entities.NotaDeCargo", b =>
                {
                    b.Property<string>("NotaDeCargoClave")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("NotaDeCargoAgenteClave");

                    b.Property<string>("NotaDeCargoCFDIFormaDePago");

                    b.Property<string>("NotaDeCargoCFDIMetodoDePago");

                    b.Property<string>("NotaDeCargoCFDIVersion");

                    b.Property<decimal>("NotaDeCargoCantIva");

                    b.Property<string>("NotaDeCargoDescripcion");

                    b.Property<int>("NotaDeCargoEstado");

                    b.Property<string>("NotaDeCargoFacturaClave")
                        .IsRequired();

                    b.Property<DateTime>("NotaDeCargoFecha");

                    b.Property<decimal>("NotaDeCargoIVA");

                    b.Property<int>("NotaDeCargoMoneda");

                    b.Property<decimal>("NotaDeCargoSubtotal");

                    b.Property<decimal>("NotaDeCargoTipoDeCambio");

                    b.Property<decimal>("NotaDeCargoTotal");

                    b.Property<string>("NotaDeCargoUsoCFDI");

                    b.Property<string>("NotaDeCargoUsuarioClave");

                    b.HasKey("NotaDeCargoClave");

                    b.HasIndex("NotaDeCargoAgenteClave");

                    b.HasIndex("NotaDeCargoFacturaClave");

                    b.HasIndex("NotaDeCargoUsuarioClave");

                    b.ToTable("NotasCargo");
                });

            modelBuilder.Entity("DataRepositories.Entities.NotaDeCredito", b =>
                {
                    b.Property<string>("NotaDeCreditoClave")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("NotaDeCreditoAgenteClave");

                    b.Property<string>("NotaDeCreditoAprobacion");

                    b.Property<bool>("NotaDeCreditoCFDI");

                    b.Property<string>("NotaDeCreditoCFDIFormaDePago");

                    b.Property<string>("NotaDeCreditoCFDIMetodoDePago");

                    b.Property<string>("NotaDeCreditoCFDIVersion");

                    b.Property<string>("NotaDeCreditoDescripcion");

                    b.Property<int>("NotaDeCreditoEstado");

                    b.Property<string>("NotaDeCreditoFacturaClave")
                        .IsRequired();

                    b.Property<DateTime>("NotaDeCreditoFecha");

                    b.Property<DateTime>("NotaDeCreditoFechaTimbrado");

                    b.Property<string>("NotaDeCreditoFolioFiscal");

                    b.Property<decimal>("NotaDeCreditoIVA");

                    b.Property<int>("NotaDeCreditoMoneda");

                    b.Property<string>("NotaDeCreditoSelloCFDI");

                    b.Property<string>("NotaDeCreditoSelloSAT");

                    b.Property<string>("NotaDeCreditoSerie");

                    b.Property<decimal>("NotaDeCreditoSubtotal");

                    b.Property<bool>("NotaDeCreditoTimbrada");

                    b.Property<decimal>("NotaDeCreditoTipoDeCambio");

                    b.Property<decimal>("NotaDeCreditoTotal");

                    b.Property<string>("NotaDeCreditoUsoCFDI");

                    b.Property<string>("NotaDeCreditoUsuarioClave");

                    b.HasKey("NotaDeCreditoClave");

                    b.HasIndex("NotaDeCreditoAgenteClave");

                    b.HasIndex("NotaDeCreditoFacturaClave");

                    b.HasIndex("NotaDeCreditoUsuarioClave");

                    b.ToTable("NotasCred");
                });

            modelBuilder.Entity("DataRepositories.Entities.Pago", b =>
                {
                    b.Property<string>("PagoClave")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("PagoAgenteClave");

                    b.Property<decimal>("PagoCantComision");

                    b.Property<decimal>("PagoCantidad");

                    b.Property<decimal>("PagoComNew");

                    b.Property<decimal>("PagoComision");

                    b.Property<bool>("PagoComisionPagada");

                    b.Property<string>("PagoDescripcion");

                    b.Property<string>("PagoFacturaClave")
                        .IsRequired();

                    b.Property<DateTime>("PagoFecha");

                    b.Property<DateTime>("PagoFechaComision");

                    b.Property<int>("PagoMoneda");

                    b.Property<decimal>("PagoNeto");

                    b.Property<int>("PagoTipo");

                    b.Property<decimal>("PagoTipoDeCambio");

                    b.Property<string>("PagoUsuarioClave");

                    b.HasKey("PagoClave");

                    b.HasIndex("PagoAgenteClave");

                    b.HasIndex("PagoFacturaClave");

                    b.HasIndex("PagoUsuarioClave");

                    b.ToTable("Pagos");
                });

            modelBuilder.Entity("DataRepositories.Entities.Pantone", b =>
                {
                    b.Property<string>("PantoneClave")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("PantoneDescripcion");

                    b.HasKey("PantoneClave");

                    b.ToTable("Pantones");
                });

            modelBuilder.Entity("DataRepositories.Entities.Pedido", b =>
                {
                    b.Property<string>("PedidoClave")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("PedidoAgenteClave");

                    b.Property<bool>("PedidoCalcularComision");

                    b.Property<decimal>("PedidoCantIVA");

                    b.Property<decimal>("PedidoCantMill");

                    b.Property<string>("PedidoClienteClave")
                        .IsRequired();

                    b.Property<decimal>("PedidoComision");

                    b.Property<string>("PedidoConsignatarioClave");

                    b.Property<decimal>("PedidoDescuento");

                    b.Property<decimal>("PedidoDescuentoPorcentaje");

                    b.Property<int>("PedidoEstado");

                    b.Property<DateTime>("PedidoFecha");

                    b.Property<DateTime>("PedidoFechaCancelacion");

                    b.Property<DateTime>("PedidoFechaOrdenCompra");

                    b.Property<decimal>("PedidoFlete");

                    b.Property<decimal>("PedidoIVA");

                    b.Property<int>("PedidoMoneda");

                    b.Property<string>("PedidoPedCliente");

                    b.Property<int>("PedidoPlazo");

                    b.Property<decimal>("PedidoSubtotal");

                    b.Property<decimal>("PedidoTipoDeCambio");

                    b.Property<decimal>("PedidoTotal");

                    b.Property<string>("PedidoTransporte");

                    b.Property<string>("PedidoUsuarioClave");

                    b.HasKey("PedidoClave");

                    b.HasIndex("PedidoAgenteClave");

                    b.HasIndex("PedidoClienteClave");

                    b.HasIndex("PedidoConsignatarioClave");

                    b.HasIndex("PedidoUsuarioClave");

                    b.ToTable("Pedidos");
                });

            modelBuilder.Entity("DataRepositories.Entities.Proveedor", b =>
                {
                    b.Property<string>("ProveedorClave")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ProveedorANombreDe");

                    b.Property<bool>("ProveedorAutorizadoIso");

                    b.Property<string>("ProveedorCP");

                    b.Property<string>("ProveedorCiudad");

                    b.Property<string>("ProveedorCuentaGastoClave");

                    b.Property<string>("ProveedorDireccion");

                    b.Property<string>("ProveedorEncargado");

                    b.Property<bool>("ProveedorEstado");

                    b.Property<string>("ProveedorFax");

                    b.Property<string>("ProveedorNombre");

                    b.Property<string>("ProveedorRFC");

                    b.Property<string>("ProveedorTelefono");

                    b.HasKey("ProveedorClave");

                    b.HasIndex("ProveedorCuentaGastoClave");

                    b.ToTable("Proveedores");
                });

            modelBuilder.Entity("DataRepositories.Entities.Suaje", b =>
                {
                    b.Property<string>("SuajeClave")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("SuajeAldesarrollo");

                    b.Property<decimal>("SuajeAlpaso");

                    b.Property<decimal>("SuajeAncho_mm");

                    b.Property<decimal>("SuajeAncho_p");

                    b.Property<bool>("SuajeCalcularAnchoCinta");

                    b.Property<bool>("SuajeCalcularMxMillar");

                    b.Property<int>("SuajeCavidades");

                    b.Property<decimal>("SuajeCinta_mm");

                    b.Property<decimal>("SuajeCinta_p");

                    b.Property<string>("SuajeDescripcion");

                    b.Property<int>("SuajeEngrane");

                    b.Property<bool>("SuajeEstado");

                    b.Property<decimal>("SuajeLargo_mm");

                    b.Property<decimal>("SuajeLargo_p");

                    b.Property<decimal>("SuajeMxmillar");

                    b.Property<decimal>("SuajeRadio");

                    b.Property<decimal>("SuajeSepdesap");

                    b.Property<decimal>("SuajeSepejep");

                    b.Property<int>("SuajeTipo");

                    b.HasKey("SuajeClave");

                    b.ToTable("Suajes");
                });

            modelBuilder.Entity("DataRepositories.Entities.SuajeEtiqueta", b =>
                {
                    b.Property<string>("SuajeClave");

                    b.Property<string>("EtiquetaClave");

                    b.HasKey("SuajeClave", "EtiquetaClave");

                    b.HasIndex("EtiquetaClave");

                    b.ToTable("SuajeEtiqueta");
                });

            modelBuilder.Entity("DataRepositories.Entities.Usuario", b =>
                {
                    b.Property<string>("UsuarioClave")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("UsuarioAccesoAdmin");

                    b.Property<string>("UsuarioAgenteClave");

                    b.Property<bool>("UsuarioEtiquetasAprobacion");

                    b.Property<bool>("UsuarioInventario");

                    b.Property<string>("UsuarioNombre");

                    b.Property<int>("UsuarioPermisoAgentes");

                    b.Property<int>("UsuarioPermisoCheques");

                    b.Property<int>("UsuarioPermisoClientes");

                    b.Property<int>("UsuarioPermisoCompras");

                    b.Property<int>("UsuarioPermisoConsignatarios");

                    b.Property<int>("UsuarioPermisoCortadores");

                    b.Property<int>("UsuarioPermisoEtiquetas");

                    b.Property<int>("UsuarioPermisoFacturas");

                    b.Property<int>("UsuarioPermisoFormatos");

                    b.Property<int>("UsuarioPermisoInventario");

                    b.Property<int>("UsuarioPermisoMateriales");

                    b.Property<int>("UsuarioPermisoNotasCargo");

                    b.Property<int>("UsuarioPermisoNotasCredito");

                    b.Property<int>("UsuarioPermisoPagos");

                    b.Property<int>("UsuarioPermisoPedidos");

                    b.Property<int>("UsuarioPermisoProveedores");

                    b.Property<int>("UsuarioPermisoSalidas");

                    b.Property<int>("UsuarioPermisoSuajes");

                    b.Property<int>("UsuarioPermisoZonas");

                    b.Property<bool>("UsuarioVendedor");

                    b.Property<bool>("Usuario_H_M");

                    b.HasKey("UsuarioClave");

                    b.HasIndex("UsuarioAgenteClave");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("DataRepositories.Entities.Zona", b =>
                {
                    b.Property<string>("ZonaClave")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ZonaDescripcion");

                    b.Property<string>("ZonaNombre");

                    b.HasKey("ZonaClave");

                    b.ToTable("Zonas");
                });

            modelBuilder.Entity("DataRepositories.Entities.Cheque", b =>
                {
                    b.HasOne("DataRepositories.Entities.Proveedor", "ChequeProveedor")
                        .WithMany()
                        .HasForeignKey("ChequeProveedorClave")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataRepositories.Entities.Cliente", b =>
                {
                    b.HasOne("DataRepositories.Entities.Agente", "ClienteAgente")
                        .WithMany()
                        .HasForeignKey("ClienteAgenteClave")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataRepositories.Entities.Zona", "ClienteZona")
                        .WithMany()
                        .HasForeignKey("ClienteZonaClave")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataRepositories.Entities.Compra", b =>
                {
                    b.HasOne("DataRepositories.Entities.Consignatario", "CompraConsignatario")
                        .WithMany()
                        .HasForeignKey("CompraConsignatarioClave");

                    b.HasOne("DataRepositories.Entities.Proveedor", "CompraProveedor")
                        .WithMany()
                        .HasForeignKey("CompraProveedorClave")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataRepositories.Entities.Usuario", "CompraUsuario")
                        .WithMany()
                        .HasForeignKey("CompraUsuarioClave");
                });

            modelBuilder.Entity("DataRepositories.Entities.ConceptoCompra", b =>
                {
                    b.HasOne("DataRepositories.Entities.Compra", "ConceptoCompraCompra")
                        .WithMany()
                        .HasForeignKey("ConceptoCompraCompraClave")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataRepositories.Entities.Etiqueta", "ConceptoCompraEtiqueta")
                        .WithMany()
                        .HasForeignKey("ConceptoCompraEtiquetaClave");
                });

            modelBuilder.Entity("DataRepositories.Entities.ConceptoFactura", b =>
                {
                    b.HasOne("DataRepositories.Entities.Etiqueta", "ConceptoFacturaEtiqueta")
                        .WithMany()
                        .HasForeignKey("ConceptoFacturaEtiquetaClave");

                    b.HasOne("DataRepositories.Entities.Factura", "ConceptoFacturaFactura")
                        .WithMany()
                        .HasForeignKey("ConceptoFacturaFacturaClave")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataRepositories.Entities.ConceptoPedido", b =>
                {
                    b.HasOne("DataRepositories.Entities.Etiqueta", "ConceptoPedidoEtiqueta")
                        .WithMany()
                        .HasForeignKey("ConceptoPedidoEtiquetaClave");

                    b.HasOne("DataRepositories.Entities.Pedido", "ConceptoPedidoPedido")
                        .WithMany()
                        .HasForeignKey("ConceptoPedidoPedidoClave")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataRepositories.Entities.Consignatario", b =>
                {
                    b.HasOne("DataRepositories.Entities.Cliente", "ConsignatarioCliente")
                        .WithMany()
                        .HasForeignKey("ConsignatarioClienteClave")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataRepositories.Entities.CortadorEtiqueta", b =>
                {
                    b.HasOne("DataRepositories.Entities.Cortador", "Cortador")
                        .WithMany("CortadorEtiquetas")
                        .HasForeignKey("CortadorClave")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataRepositories.Entities.Etiqueta", "Etiqueta")
                        .WithMany("EtiquetaListaCortadores")
                        .HasForeignKey("EtiquetaClave")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataRepositories.Entities.Estacion", b =>
                {
                    b.HasOne("DataRepositories.Entities.Etiqueta", "EstacionEtiqueta")
                        .WithMany("EtiquetaListaEstaciones")
                        .HasForeignKey("EstacionEtiquetaClave")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataRepositories.Entities.Pantone", "EstacionPantone")
                        .WithMany()
                        .HasForeignKey("EstacionPantoneClave");
                });

            modelBuilder.Entity("DataRepositories.Entities.Etiqueta", b =>
                {
                    b.HasOne("DataRepositories.Entities.Cliente", "EtiquetaCliente")
                        .WithMany()
                        .HasForeignKey("EtiquetaClienteClave");

                    b.HasOne("DataRepositories.Entities.Formato", "EtiquetaFormato")
                        .WithMany()
                        .HasForeignKey("EtiquetaFormatoClave");

                    b.HasOne("DataRepositories.Entities.Material", "EtiquetaMaterial")
                        .WithMany()
                        .HasForeignKey("EtiquetaMaterialClave");

                    b.HasOne("DataRepositories.Entities.Proveedor", "EtiquetaProveedor")
                        .WithMany()
                        .HasForeignKey("EtiquetaProveedorClave");
                });

            modelBuilder.Entity("DataRepositories.Entities.ExistenciaInventario", b =>
                {
                    b.HasOne("DataRepositories.Entities.Etiqueta", "ExistenciaInventarioEtiqueta")
                        .WithMany()
                        .HasForeignKey("ExistenciaInventarioEtiquetaClave");

                    b.HasOne("DataRepositories.Entities.Usuario", "ExistenciaInventarioUsuario")
                        .WithMany()
                        .HasForeignKey("ExistenciaInventarioUsuarioClave");
                });

            modelBuilder.Entity("DataRepositories.Entities.Factura", b =>
                {
                    b.HasOne("DataRepositories.Entities.Agente", "FacturaAgente")
                        .WithMany()
                        .HasForeignKey("FacturaAgenteClave");

                    b.HasOne("DataRepositories.Entities.Cliente", "FacturaCliente")
                        .WithMany()
                        .HasForeignKey("FacturaClienteClave")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataRepositories.Entities.Consignatario", "FacturaConsignatario")
                        .WithMany()
                        .HasForeignKey("FacturaConsignatarioClave");

                    b.HasOne("DataRepositories.Entities.Pedido", "FacturaPedido")
                        .WithMany()
                        .HasForeignKey("FacturaPedidoClave");

                    b.HasOne("DataRepositories.Entities.Usuario", "FacturaUsuario")
                        .WithMany()
                        .HasForeignKey("FacturaUsuarioClave");
                });

            modelBuilder.Entity("DataRepositories.Entities.InventarioSalida", b =>
                {
                    b.HasOne("DataRepositories.Entities.ExistenciaInventario", "InventarioSalidaExistenciaInventario")
                        .WithMany()
                        .HasForeignKey("InventarioSalidaExistenciaInventarioClave")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataRepositories.Entities.Material", b =>
                {
                    b.HasOne("DataRepositories.Entities.Formato", "MaterialFormato")
                        .WithMany()
                        .HasForeignKey("MaterialFormatoClave");

                    b.HasOne("DataRepositories.Entities.Proveedor", "MaterialProveedor")
                        .WithMany()
                        .HasForeignKey("MaterialProveedorClave");
                });

            modelBuilder.Entity("DataRepositories.Entities.NotaDeCargo", b =>
                {
                    b.HasOne("DataRepositories.Entities.Agente", "NotaDeCargoAgente")
                        .WithMany()
                        .HasForeignKey("NotaDeCargoAgenteClave");

                    b.HasOne("DataRepositories.Entities.Factura", "NotaDeCargoFactura")
                        .WithMany()
                        .HasForeignKey("NotaDeCargoFacturaClave")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataRepositories.Entities.Usuario", "NotaDeCargoUsuario")
                        .WithMany()
                        .HasForeignKey("NotaDeCargoUsuarioClave");
                });

            modelBuilder.Entity("DataRepositories.Entities.NotaDeCredito", b =>
                {
                    b.HasOne("DataRepositories.Entities.Agente", "NotaDeCreditoAgente")
                        .WithMany()
                        .HasForeignKey("NotaDeCreditoAgenteClave");

                    b.HasOne("DataRepositories.Entities.Factura", "NotaDeCreditoFactura")
                        .WithMany()
                        .HasForeignKey("NotaDeCreditoFacturaClave")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataRepositories.Entities.Usuario", "NotaDeCreditoUsuario")
                        .WithMany()
                        .HasForeignKey("NotaDeCreditoUsuarioClave");
                });

            modelBuilder.Entity("DataRepositories.Entities.Pago", b =>
                {
                    b.HasOne("DataRepositories.Entities.Agente", "PagoAgente")
                        .WithMany()
                        .HasForeignKey("PagoAgenteClave");

                    b.HasOne("DataRepositories.Entities.Factura", "PagoFactura")
                        .WithMany()
                        .HasForeignKey("PagoFacturaClave")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataRepositories.Entities.Usuario", "PagoUsuario")
                        .WithMany()
                        .HasForeignKey("PagoUsuarioClave");
                });

            modelBuilder.Entity("DataRepositories.Entities.Pedido", b =>
                {
                    b.HasOne("DataRepositories.Entities.Agente", "PedidoAgente")
                        .WithMany()
                        .HasForeignKey("PedidoAgenteClave");

                    b.HasOne("DataRepositories.Entities.Cliente", "PedidoCliente")
                        .WithMany()
                        .HasForeignKey("PedidoClienteClave")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataRepositories.Entities.Consignatario", "PedidoConsignatario")
                        .WithMany()
                        .HasForeignKey("PedidoConsignatarioClave");

                    b.HasOne("DataRepositories.Entities.Usuario", "PedidoUsuario")
                        .WithMany()
                        .HasForeignKey("PedidoUsuarioClave");
                });

            modelBuilder.Entity("DataRepositories.Entities.Proveedor", b =>
                {
                    b.HasOne("DataRepositories.Entities.CuentaGasto", "ProveedorCuentaGasto")
                        .WithMany()
                        .HasForeignKey("ProveedorCuentaGastoClave");
                });

            modelBuilder.Entity("DataRepositories.Entities.SuajeEtiqueta", b =>
                {
                    b.HasOne("DataRepositories.Entities.Etiqueta", "Etiqueta")
                        .WithMany("EtiquetaListaSuajes")
                        .HasForeignKey("EtiquetaClave")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataRepositories.Entities.Suaje", "Suaje")
                        .WithMany("SuajeEtiquetas")
                        .HasForeignKey("SuajeClave")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataRepositories.Entities.Usuario", b =>
                {
                    b.HasOne("DataRepositories.Entities.Agente", "UsuarioAgente")
                        .WithMany()
                        .HasForeignKey("UsuarioAgenteClave");
                });
#pragma warning restore 612, 618
        }
    }
}
